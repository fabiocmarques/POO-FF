/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(GramaticaMH)
package br.unb.cic.poo.MiniHaskell.parser;

import br.unb.cic.poo.MiniHaskell.*;

public class GramaticaMH
{
  public static void main(String args []) throws ParseException
  {
    GramaticaMH parser = new GramaticaMH(System.in);
    while(true)    {
      Expressao exp = parser.expr();
      ValorInteiro res = (ValorInteiro)exp.avaliar();
		
      System.out.println(res.getValor());
    }
  }
}

PARSER_END(GramaticaMH)

Expressao getSoma():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoSoma(lhs, rhs);} 
}

Expressao getLet():
{
	Expressao expAt;
	Expressao expCorpo;
	String id;
	Token idToken;
}
{
	idToken = <STRING>
	<EQUALS>
	expAt = expr()
	<IN>
	expCorpo = expr()
	
	{return new ExpressaoLet(idToken.image, expAt, expCorpo);}
}


Expressao expr():
{
  Token t;
  Token ref;
  ExpressaoSoma s;
  Expressao exp;
  int lhs = 0;
  int rhs = 0;
  ValorInteiro res;
}
{
	
  	<PLUS>
  	(
   		exp = getSoma()
   		
   		{return exp;}
  	)*
|	t = <NUMBER> 
	{ return new ValorInteiro(Integer.parseInt(t.image));}
|	<LET>
	(
		exp = getLet()
		
		{return exp;}
	)*
|   ref = <STRING>
	{ return new ExpRef(ref.image);}

  < FINAL_LINHA >
  /*<EOF>*/

  //{
    //{
    //  s = new ExpressaoSoma(new ValorInteiro(lhs), new ValorInteiro(rhs));
  //  }

//    res = (ValorInteiro)s.avaliar();
		
   // System.out.println(res.getValor());
  //}  
}

//void AchaSoma()://{//	//}//{// < LET >//}


//ExpressaoLet Let()://{//  Token t;//  String id;//}//{//  < LET >//  (//    //    t = < STRING >//    {id = t;}////    < EQUALS >////    t = < NUMBER >//    {}//  //      ////	< IN >////	//    //    //    //  )*//  < FINAL_LINHA >////  //}



SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  	/* Operador de soma na linguagem definido como "soma": */
	< PLUS : "soma" >
 |  < LET : "let" >
 |	< IN : "in" >
 |	< EQUALS: "=" >

 	
}

TOKEN : /* NUMEROS */
{
	< NUMBER : (["0"-"9"])+ >
 |	< STRING : (["a"-"z"])+ >
}

TOKEN : /* END OF LINE */
{
	< FINAL_LINHA : ";" >
}