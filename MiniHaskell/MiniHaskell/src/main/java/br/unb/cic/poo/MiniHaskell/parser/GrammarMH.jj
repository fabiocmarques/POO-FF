/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(GramaticaMH)
package br.unb.cic.poo.MiniHaskell.parser;

import br.unb.cic.poo.MiniHaskell.*;
import java.util.*;

public class GramaticaMH
{
  public static void main(String args []) throws ParseException
  {
    GramaticaMH parser = new GramaticaMH(System.in);
    while(true)    {
      Expressao exp = parser.expr();

      if(exp.avaliar() instanceof ValorInteiro){
        ValorInteiro i = (ValorInteiro)exp.avaliar();
      
      	System.out.println(i.getValor());
      }
      
      if(exp.avaliar() instanceof ValorBooleano){		ValorBooleano b = (ValorBooleano)exp.avaliar();
      
      	System.out.println(b.getValor());
      }
    }
  }
}

PARSER_END(GramaticaMH)

Expressao getSoma():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoSoma(lhs, rhs);} 
}


Expressao getEquals():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoIgual(lhs, rhs);} 
}


Expressao getMaior():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoMaior(lhs, rhs);} 
}

Expressao getMenor():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoMenor(lhs, rhs);} 
}

Expressao getMaiorEq():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoMaiorOuIgual(lhs, rhs);} 
}


Expressao getMenorEq():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoMenorOuIgual(lhs, rhs);} 
}


Expressao getMult():
{
	Expressao lhs;
	Expressao rhs;
}
{
	lhs = expr()
	rhs = expr()
	
	{return new ExpressaoMultiplicacao(lhs, rhs);} 
}


Expressao getLet():
{
	Expressao expAt;
	Expressao expCorpo;
	String id;
	Token idToken;
}
{
	idToken = <STRING>
	<EQUALS>
	expAt = expr()
	<IN>
	expCorpo = expr()
	
	{return new ExpressaoLet(idToken.image, expAt, expCorpo);}
}


void getArgumentosDecFunc(ArrayList<String> argumentos):{
  Token t;}
{
    t = < STRING >
    
  {
    argumentos.add(t.image);  }      
    getArgumentosDecFunc(argumentos)
| < RPAR >
	{  
		return;	}        
    }


DecFuncao getFunc():
{
  Token nome;
  ArrayList<String> argumentos = new ArrayList<String>();
  Expressao exp;}
{
	nome = < STRING >
  
  < LPAR >  	  getArgumentosDecFunc(argumentos)
  

  < LPAR >
  	exp = expr()
  < RPAR >

  {    return(new DecFuncao(nome.image, argumentos, exp));
  }}


void getParametrosAplFuncao(ArrayList<Expressao> exprs):
{
  Expressao exp;}
{

	exp = expr()
	{
  	exprs.add(exp);
	}
  
  	getParametrosAplFuncao(exprs)

|  < RPAR >
	{
	  return;
	}
	
  }



AplicacaoDeFuncao getEval():
{
  Token nome;
  ArrayList<Expressao> exprs = new ArrayList<Expressao>();
  AplicacaoDeFuncao func;
  Valor v;
  ValorInteiro inteiro;}
{
  nome = <STRING>

  < LPAR >
  getParametrosAplFuncao(exprs)
  {    return new AplicacaoDeFuncao(nome.image, exprs);  }
  }






Expressao expr():
{
  Token t;
  Token ref;
  Token func;
  ValorBooleano ret = new ValorBooleano(false);
  ExpressaoSoma s;
  Expressao if1, then1, else1;
  DecFuncao dec;
  Expressao exp;
  int lhs = 0;
  int rhs = 0;
  ValorInteiro res;
  Token negNumber;
}
{
	
  	<PLUS>
  	(
   		exp = getSoma()
   		
   		{return exp;}
  	)*
  	
| < MULT >
	(
   		exp = getMult()
   		
   		{return exp;}
  	)*

|	t = <NUMBER> 
	{ return new ValorInteiro(Integer.parseInt(t.image));}
	
|	<LET>
	(
		exp = getLet()
		
		{return exp;}
	)*
	
|   ref = <STRING>
	{ return new ExpRef(ref.image);}
	
|	< FUNC >
	(
	  dec = getFunc()
	  {
	    AmbienteExecucao.getInstance().declaraFuncao(dec);	  }
	  {return ret = new ValorBooleano(true);}	)*
	
| 	< EVAL >
	exp = getEval()
	{
		return exp;	}

| 	< IGUAL >
	(
   		exp = getEquals()
   		
   		{return exp;}
  	)*
	
| 	< MAIOR >
	(
   		exp = getMaior()
   		
   		{return exp;}
  	)*

| 	< MENOR >
	(
   		exp = getMenor()
   		
   		{return exp;}
  	)*

| 	< MAIOR_EQ >
	(
   		exp = getMaiorEq()
   		
   		{return exp;}
  	)*

| 	< MENOR_EQ >
	(
   		exp = getMenorEq()
   		
   		{return exp;}
  	)*

| 	< IF >
	if1 = expr()
	< THEN >
	then1 = expr()
	< ELSE >
	else1 = expr()

	{return(new IfThenElse(if1, then1, else1));}
|
	< NEG >
	(		negNumber = < NUMBER >

		{return new ExpressaoMultiplicacao(new ValorInteiro(-1), new ValorInteiro(Integer.parseInt(negNumber.image)));}
	)*
}







SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  	/* Operador de soma na linguagem definido como "soma": */
	< PLUS : "soma" >
 |  < MENOR : "menor" >
 | 	< MAIOR : "maior" >
 |  < IGUAL : "equals" >
 |  < MENOR_EQ : "menor_eq" >
 |  < MAIOR_EQ : "maior_eq" > 
 | 	< MULT : "mult" > 
 |  < LET : "let" >
 | 	< LPAR: "(" >
 | 	< RPAR : ")" >
 | 	< FUNC : "func" >
 |	< IN : "in" >
 |	< EQUALS: "=" >
 | 	< EVAL: "eval" >
 | 	< IF: "if" >
 | 	< THEN: "then" >
 | 	< ELSE: "else" >
 |  < NEG: "neg" >

 	
}

TOKEN : /* NUMEROS */
{
	< NUMBER : (["0"-"9"])+ >
 |	< STRING : (["a"-"z"] | ["A"-"Z"])+ >
}

TOKEN : /* END OF LINE */
{
	< FINAL_LINHA : ";" >
}