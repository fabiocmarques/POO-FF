/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(GramaticaMH)
package br.unb.cic.poo.MiniHaskell.parser;

import br.unb.cic.poo.MiniHaskell.*;

public class GramaticaMH
{
  public static void main(String args []) throws ParseException
  {
    GramaticaMH parser = new GramaticaMH(System.in);
    while(true)    {
      parser.Soma();
    }
  }
}

PARSER_END(GramaticaMH)

void Soma():
{
  Token t;
  ExpressaoSoma s;
  int lhs = 0;
  int rhs = 0;
  ValorInteiro res;
}
{
	
  <PLUS>
  (
   
   
    t = <NUMBER>
    { lhs = Integer.parseInt(t.image);}
    
  

    
    t = <NUMBER>
    { rhs = Integer.parseInt(t.image);}       
  )*

  < FINAL_LINHA >
  /*<EOF>*/

  {
    {
      s = new ExpressaoSoma(new ValorInteiro(lhs), new ValorInteiro(rhs));
    }

    res = (ValorInteiro)s.avaliar();
		
    System.out.println(res.getValor());
  }  
}

//void AchaSoma()://{//	//}//{// < LET >//}


//ExpressaoLet Let()://{//  Token t;//  String id;//}//{//  < LET >//  (//    //    t = < STRING >//    {id = t;}////    < EQUALS >////    t = < NUMBER >//    {}//  //      ////	< IN >////	//    //    //    //  )*//  < FINAL_LINHA >////  //}



SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  	/* Operador de soma na linguagem definido como "soma": */
	< PLUS : "soma" >
 	/*< LET : "let" >
 	< IN : "in" >
 	< EQUALS: "=" >*/

 	
}

TOKEN : /* NUMEROS */
{
	< NUMBER : (["0"-"9"])+ >
 	//< STRING : (["a"-"z")+ >
}

TOKEN : /* END OF LINE */
{
	< FINAL_LINHA : ";" >
}